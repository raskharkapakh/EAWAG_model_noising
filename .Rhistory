if (!require("jsonlite")){install.packages("jsonlite"); library("jsonlite")}
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Custom R scripts ----
source("ml_models.r")
source("plotting.r")
source("performances_assessment.r")
source("global_variables.r")
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Global variables ----
list.experiences <- list("baseline"          = "experiment_no_noise_29_06_2023_18h13",
"missdetection"     = "experiment_miss_gammaridae_50_01_07_2023_03h37",
"gaussian noise"    = "experiment_temp_5_30_06_2023_05h53",
"less datapoints"   = "experiment_subset_500_01_07_2023_11h23")
list.exp.gauss   <- list("baseline"          = "experiment_no_noise_29_06_2023_18h13",
"low noise"         = "experiment_temp_1_29_06_2023_20h44",
"mid noise"         = "experiment_temp_3_29_06_2023_23h07",
"high noise"        = "experiment_temp_5_30_06_2023_05h53")
list.exp.miss    <- list("baseline"          = "experiment_no_noise_29_06_2023_18h13",
"low noise"         = "experiment_miss_gammaridae_10_30_06_2023_13h02",
"mid noise"         = "experiment_miss_gammaridae_25_30_06_2023_19h54",
"high noise"        = "experiment_miss_gammaridae_50_01_07_2023_03h37")
list.exp.subset  <- list("baseline"          = "experiment_no_noise_29_06_2023_18h13",
"low noise"         = "experiment_subset_2000_01_07_2023_16h52",
"mid noise"         = "experiment_subset_1000_01_07_2023_13h28",
"high noise"        = "experiment_subset_500_01_07_2023_11h23")
list.dummy       <- list("baseline"          = "dummy_temp_0",
"low noise"         = "dummy_temp_1",
"mid noise"         = "dummy_temp_3",
"high noise"        = "dummy_temp_5")
create.comparison.plots("dummy", list.dummy)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Init ----
Sys.setenv(LANG="EN")
set.seed(13)   # Always set seed to a lucky number
getwd()        # Show working directory. It needs to be the location of 'main.r'
rm(list=ls())  # Free work space
graphics.off() # Clean graphics display
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Libraries ----
if (!require("dplyr")){install.packages("dplyr"); library("dplyr")}
if (!require("readr")){install.packages("readr"); library("readr")}
# to compute AUC
if (!require("pROC")){install.packages("pROC"); library("pROC")}
# For Neural Network
if (!require("reticulate")){install.packages("reticulate"); library("reticulate")}
#install_miniconda()              # run this the very first time reticulate is installed
#install.packages("tensorflow")
library("tensorflow")
#install_tensorflow()             # run this line only when opening new R session
#install.packages("keras")
library("keras")
# caret has to be loaded at the end to not cache function 'train'
if (!require("caret")){install.packages("caret"); library("caret")}
if (!require("jsonlite")){install.packages("jsonlite"); library("jsonlite")}
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Custom R scripts ----
source("ml_models.r")
source("plotting.r")
source("performances_assessment.r")
source("global_variables.r")
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Global variables ----
list.experiences <- list("baseline"          = "experiment_no_noise_29_06_2023_18h13",
"missdetection"     = "experiment_miss_gammaridae_50_01_07_2023_03h37",
"gaussian noise"    = "experiment_temp_5_30_06_2023_05h53",
"less datapoints"   = "experiment_subset_500_01_07_2023_11h23")
list.exp.gauss   <- list("baseline"          = "experiment_no_noise_29_06_2023_18h13",
"low noise"         = "experiment_temp_1_29_06_2023_20h44",
"mid noise"         = "experiment_temp_3_29_06_2023_23h07",
"high noise"        = "experiment_temp_5_30_06_2023_05h53")
list.exp.miss    <- list("baseline"          = "experiment_no_noise_29_06_2023_18h13",
"low noise"         = "experiment_miss_gammaridae_10_30_06_2023_13h02",
"mid noise"         = "experiment_miss_gammaridae_25_30_06_2023_19h54",
"high noise"        = "experiment_miss_gammaridae_50_01_07_2023_03h37")
list.exp.subset  <- list("baseline"          = "experiment_no_noise_29_06_2023_18h13",
"low noise"         = "experiment_subset_2000_01_07_2023_16h52",
"mid noise"         = "experiment_subset_1000_01_07_2023_13h28",
"high noise"        = "experiment_subset_500_01_07_2023_11h23")
list.dummy       <- list("baseline"          = "dummy_temp_0",
"low noise"         = "dummy_temp_1",
"mid noise"         = "dummy_temp_3",
"high noise"        = "dummy_temp_5")
create.comparison.plots("dummy", list.dummy)
10/100
10/100.0
p = 20
noise <- lapply(list(TAXA.COLNAMES), FUN=function(taxon){
list("type"       = "missdetection",
"target"     = taxon,
"amount"     = p/100.0,
"parameters" = NULL)
})
View(noise)
noise <- lapply(list(TAXA.COLNAMES), FUN=function(taxon){
noise_taxon <- list("type"       = "missdetection",
"target"     = taxon,
"amount"     = p/100.0,
"parameters" = NULL)
return(noise_taxon)
})
View(noise)
noise <- apply(list(TAXA.COLNAMES), MARGIN=1, FUN=function(taxon){
noise_taxon <- list("type"       = "missdetection",
"target"     = taxon,
"amount"     = p/100.0,
"parameters" = NULL)
return(noise_taxon)
})
TAXA.COLNAMES      <-  c("Simuliidae"                      = "Occurrence.Simuliidae",
"Oligochaeta"                     = "Occurrence.Oligochaeta",
"Limoniidae"                      = "Occurrence.Limoniidae",
"Limnephilidae"                   = "Occurrence.Limnephilidae",
"Rhyacophilidae"                  = "Occurrence.Rhyacophilidae",
"Elmidae"                         = "Occurrence.Elmidae",
"Gammaridae"                      = "Occurrence.Gammaridae",
"Heptageniidae"                   = "Occurrence.Heptageniidae",
"Nemouridae"                      = "Occurrence.Nemouridae",
"Empididae"                       = "Occurrence.Empididae",
"Hydropsychidae"                  = "Occurrence.Hydropsychidae",
"Leuctridae"                      = "Occurrence.Leuctridae",
"Ceratopogonidae"                 = "Occurrence.Ceratopogonidae",
"Prostigmata"                     = "Occurrence.Prostigmata",
"Psychodidae"                     = "Occurrence.Psychodidae",
"Leptophlebiidae"                 = "Occurrence.Leptophlebiidae",
"Sphaeriidae"                     = "Occurrence.Sphaeriidae",
"Taeniopterygidae"                = "Occurrence.Taeniopterygidae",
"Perlodidae"                      = "Occurrence.Perlodidae",
"Athericidae"                     = "Occurrence.Athericidae",
"Psychomyiidae"                   = "Occurrence.Psychomyiidae",
"Nematoda"                        = "Occurrence.Nematoda",
"Hydraenidae"                     = "Occurrence.Hydraenidae",
"Planariidae"                     = "Occurrence.Planariidae",
"Sericostomatidae"                = "Occurrence.Sericostomatidae",
"Tipulidae"                       = "Occurrence.Tipulidae",
"Polycentropodidae"               = "Occurrence.Polycentropodidae",
"Odontoceridae"                   = "Occurrence.Odontoceridae",
"Dugesiidae"                      = "Occurrence.Dugesiidae",
"Lymnaeidae"                      = "Occurrence.Lymnaeidae",
"Erpobdellidae"                   = "Occurrence.Erpobdellidae",
"Scirtidae"                       = "Occurrence.Scirtidae",
"Ephemerellidae"                  = "Occurrence.Ephemerellidae",
"Asellidae"                       = "Occurrence.Asellidae",
"Ephemeridae"                     = "Occurrence.Ephemeridae",
"Chloroperlidae"                  = "Occurrence.Chloroperlidae",
"Dytiscidae"                      = "Occurrence.Dytiscidae",
"Stratiomyidae"                   = "Occurrence.Stratiomyidae",
"Hydroptilidae"                   = "Occurrence.Hydroptilidae",
"Hydrobiidae"                     = "Occurrence.Hydrobiidae",
"Perlidae"                        = "Occurrence.Perlidae",
"Planorbidae"                     = "Occurrence.Planorbidae",
"Glossosomatidae"                 = "Occurrence.Glossosomatidae",
"Blephariceridae"                 = "Occurrence.Blephariceridae",
"Glossiphoniidae"                 = "Occurrence.Glossiphoniidae",
"Capniidae"                       = "Occurrence.Capniidae",
"Goeridae"                        = "Occurrence.Goeridae",
"Philopotamidae"                  = "Occurrence.Philopotamidae",
"Dixidae"                         = "Occurrence.Dixidae",
"Gyrinidae"                       = "Occurrence.Gyrinidae",
"Caenidae"                        = "Occurrence.Caenidae",
"Leptoceridae"                    = "Occurrence.Leptoceridae",
"Calopterygidae"                  = "Occurrence.Calopterygidae",
"Tabanidae"                       = "Occurrence.Tabanidae",
"Pediciidae"                      = "Occurrence.Pediciidae",
"Cordulegastridae"                = "Occurrence.Cordulegastridae",
"Anthomyiidae"                    = "Occurrence.Anthomyiidae",
"Lepidostomatidae"                = "Occurrence.Lepidostomatidae",
"Physidae"                        = "Occurrence.Physidae",
"Sialidae"                        = "Occurrence.Sialidae")
noise <- apply(TAXA.COLNAMES, MARGIN=1, FUN=function(taxon){
noise_taxon <- list("type"       = "missdetection",
"target"     = taxon,
"amount"     = p/100.0,
"parameters" = NULL)
return(noise_taxon)
})
noise <- apply(TAXA.COLNAMES, MARGIN=2, FUN=function(taxon){
noise_taxon <- list("type"       = "missdetection",
"target"     = taxon,
"amount"     = p/100.0,
"parameters" = NULL)
return(noise_taxon)
})
noise <- lapply(TAXA.COLNAMES, FUN=function(taxon){
noise_taxon <- list("type"       = "missdetection",
"target"     = taxon,
"amount"     = p/100.0,
"parameters" = NULL)
return(noise_taxon)
})
View(noise)
for (to_remove in c(list("velocity"),
list("velocity",
"A10m",
"cow.density",
"IAR"),
list("velocity",
"A10m",
"cow.density",
"IAR",
"urban.area",
"FRI",
"bFRI",
"width.variability"))){
noise <- lapply(to_remove, FUN=function(target){
noise.env.fact <- list("type"       = "remove_factor",
"target"     = target,
"amount"     = NULL,
"parameters" = NULL)
return(noise.env.fact)
})
View(noise)
}
for (index in c(1,2,3)){
l <- (list(list("velocity"),
list("velocity",
"A10m",
"cow.density",
"IAR"),
list("velocity",
"A10m",
"cow.density",
"IAR",
"urban.area",
"FRI",
"bFRI",
"width.variability")))
to_remove <- l[index]
noise <- lapply(to_remove, FUN=function(target){
noise.env.fact <- list("type"       = "remove_factor",
"target"     = target,
"amount"     = NULL,
"parameters" = NULL)
return(noise.env.fact)
})
View(noise)
}
noise <- lapply(TAXA.COLNAMES, FUN=function(taxon){
noise_taxon <- list("type"       = "missdetection",
"target"     = taxon,
"amount"     = p/100.0,
"parameters" = NULL)
return(noise_taxon)
})
View(noise)
for (index in c(1,2,3)){
l <- (list(list("velocity"),
list("velocity",
"A10m",
"cow.density",
"IAR"),
list("velocity",
"A10m",
"cow.density",
"IAR",
"urban.area",
"FRI",
"bFRI",
"width.variability")))
to_remove <- l[index]
View(to_remove)
noise <- lapply(to_remove, FUN=function(target){
noise.env.fact <- list("type"       = "remove_factor",
"target"     = target,
"amount"     = NULL,
"parameters" = NULL)
return(noise.env.fact)
})
}
View(noise)
for (index in c(1,2,3)){
l <- (list(list("velocity"),
list("velocity",
"A10m",
"cow.density",
"IAR"),
list("velocity",
"A10m",
"cow.density",
"IAR",
"urban.area",
"FRI",
"bFRI",
"width.variability")))
to_remove <- l[index]
noise <- lapply(to_remove, FUN=function(target){
noise.env.fact <- list("type"       = "remove_factor",
"target"     = target,
"amount"     = NULL,
"parameters" = NULL)
return(noise.env.fact)
})
noise2 <- lapply(TAXA.COLNAMES, FUN=function(taxon){
noise_taxon <- list("type"       = "missdetection",
"target"     = taxon,
"amount"     = p/100.0,
"parameters" = NULL)
return(noise_taxon)
})
}
View(noise)
View(noise2)
for (index in c(1,2,3)){
l <- list(list("velocity"),
list("velocity",
"A10m",
"cow.density",
"IAR"),
list("velocity",
"A10m",
"cow.density",
"IAR",
"urban.area",
"FRI",
"bFRI",
"width.variability"))
to_remove <- l[index]
noise <- lapply(to_remove, FUN=function(target){
noise.env.fact <- list("type"       = "remove_factor",
"target"     = target,
"amount"     = NULL,
"parameters" = NULL)
return(noise.env.fact)
})
noise2 <- lapply(TAXA.COLNAMES, FUN=function(taxon){
noise_taxon <- list("type"       = "missdetection",
"target"     = taxon,
"amount"     = p/100.0,
"parameters" = NULL)
return(noise_taxon)
})
}
View(noise)
for (index in c(1,2,3)){
l <- c(list("velocity"),
list("velocity",
"A10m",
"cow.density",
"IAR"),
list("velocity",
"A10m",
"cow.density",
"IAR",
"urban.area",
"FRI",
"bFRI",
"width.variability"))
to_remove <- l[index]
noise <- lapply(to_remove, FUN=function(target){
noise.env.fact <- list("type"       = "remove_factor",
"target"     = target,
"amount"     = NULL,
"parameters" = NULL)
return(noise.env.fact)
})
noise2 <- lapply(TAXA.COLNAMES, FUN=function(taxon){
noise_taxon <- list("type"       = "missdetection",
"target"     = taxon,
"amount"     = p/100.0,
"parameters" = NULL)
return(noise_taxon)
})
}
View(noise)
for (index in c(1,2,3)){
l <- list(list("velocity"),
list("velocity",
"A10m",
"cow.density",
"IAR"),
list("velocity",
"A10m",
"cow.density",
"IAR",
"urban.area",
"FRI",
"bFRI",
"width.variability"))
to_remove <- l[[index]]
View(to_remove)
noise <- lapply(to_remove, FUN=function(target){
noise.env.fact <- list("type"       = "remove_factor",
"target"     = target,
"amount"     = NULL,
"parameters" = NULL)
return(noise.env.fact)
})
noise2 <- lapply(TAXA.COLNAMES, FUN=function(taxon){
noise_taxon <- list("type"       = "missdetection",
"target"     = taxon,
"amount"     = p/100.0,
"parameters" = NULL)
return(noise_taxon)
})
}
View(noise)
noise <- lapply(list(seq(1, nb)), FUN=function(n){
noise_fact<- list("type"       = "add_factor",
"target"     = paste0("random",n) # new factor name
"amount"     = NULL,
noise <- lapply(list(seq(1, 9)), FUN=function(n){
noise_fact<- list("type"       = "add_factor",
"target"     = paste0("random",n), # new factor name
"amount"     = NULL,
"parameters" = NULL)
return(noise_taxon)
})
noise <- lapply(list(seq(1, 9)), FUN=function(n){
noise.fact <- list("type"       = "add_factor",
"target"     = paste0("random",n), # new factor name
"amount"     = NULL,
"parameters" = NULL)
return(noise.fact)
})
View(noise)
a <- list(seq(1, 9)),
a <- list(seq(1, 9))
View(a)
a <- as.list(seq(1, 9))
View(a)
noise <- lapply(a, FUN=function(n){
noise.fact <- list("type"       = "add_factor",
"target"     = paste0("random",n), # new factor name
"amount"     = NULL,
"parameters" = NULL)
return(noise.fact)
})
View(noise)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Init ----
Sys.setenv(LANG="EN")
set.seed(13)   # Always set seed to a lucky number
getwd()        # Show working directory. It needs to be the location of 'main.r'
rm(list=ls())  # Free work space
graphics.off() # Clean graphics display
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Libraries ----
if (!require("dplyr")){install.packages("dplyr"); library("dplyr")}
if (!require("readr")){install.packages("readr"); library("readr")}
# to compute AUC
if (!require("pROC")){install.packages("pROC"); library("pROC")}
# For Neural Network
if (!require("reticulate")){install.packages("reticulate"); library("reticulate")}
#install_miniconda()              # run this the very first time reticulate is installed
#install.packages("tensorflow")
library("tensorflow")
#install_tensorflow()             # run this line only when opening new R session
#install.packages("keras")
library("keras")
# caret has to be loaded at the end to not cache function 'train'
if (!require("caret")){install.packages("caret"); library("caret")}
if (!require("jsonlite")){install.packages("jsonlite"); library("jsonlite")}
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Custom R scripts ----
source("performances_assessment.r")
source("training_pipeline.r")
source("plotting.r")
# NO NOISE
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# experiment variables ----
file.input.data         <- "All_2729samples_9envfact_lme.area.elev_ModelInputs.csv"
file.prev.taxa          <- "All_2729samples_9envfact_lme.area.elev_PrevalenceTaxa.csv"
experiment.name         <- paste0("baseline_",
format(Sys.time(), "%d_%m_%Y_%Hh%M"))
number.split            <- 3
split.criterion         <- "SiteId"
number.sample           <- 10000
models                  <- list("null", "glm", "gamloess", "rf", "ann")
env.factor              <- c("Temperature"                      = "temperature",       # Temp
"Flow velocity"                    = "velocity",          # FV
"Riparian agriculture"             = "A10m",              # A10m
"Livestock unit density"           = "cow.density",       # LUD
"Insecticide application rate"     = "IAR",               # IAR
"Urban area"                       = "urban.area",        # Urban
"Forest-river intersection"        = "FRI",               # FRI
"Forest-river intersection buffer" = "bFRI",              # bFRI
"Width variability"                = "width.variability") # WV
env.factor.full         <- c(env.factor,
"Temperature2"                     = "temperature2",
"Velocity2"                        = "velocity2")
noise1 <- list("type"       = "gaussian",
"target"     = "temperature",
"amount"     = 5,
"parameters" = list("min"=0, "max"=35))
noise2 <- list("type"       = "missdetection",
"target"     = "Occurrence.Gammaridae",
"amount"     = 0.1,
"parameters" = NULL)
noise3 <- list("type"       = "add_factor",
"target"     = "random1", # new factor name
"amount"     = NULL,
"parameters" = NULL)
noise4 <- list("type"       = "remove_factor",
"target"     = "temperature",
"amount"     = NULL,
"parameters" = NULL)
noise  <- list("noise1"     = noise1,
"noise2"     = noise2,
"noise3"     = noise3,
"noise4"     = noise4)
noise  <- list()
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# training model ----
training.pipeline(file.input.data=file.input.data,
file.prev.taxa=file.prev.taxa,
experiment.name=experiment.name,
number.split=number.split,
split.criterion=split.criterion,
number.sample=number.sample,
models=models,
noise=noise,
env.factor=env.factor,
env.factor.full=env.factor.full)

noise1 <- list("type"       = "gaussian",
"target"     = "temperature",
"amount"     = 5,
"parameters" = list("min"=-5, "max"=35))
noise2 <- list("type"       = "missdetection",
"target"     = "Occurrence.Gammaridae",
"amount"     = p/100.0,
"parameters" = NULL)
noise3 <- list("type"       = "add_factor",
"target"     = "random1", # new factor name
"amount"     = NULL,
"parameters" = NULL)
noise4 <- list("type"       = "remove_factor",
"target"     = "temperature",
"amount"     = NULL,
"parameters" = NULL)
noise  <- list("noise2"     = noise2)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# training model ----
training.pipeline(file.input.data=file.input.data,
file.prev.taxa=file.prev.taxa,
experiment.name=experiment.name,
number.split=number.split,
split.criterion=split.criterion,
number.sample=number.sample,
models=models,
noise=noise,
env.factor=env.factor,
env.factor.full=env.factor.full)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# plotting models and saving model ----
create.plots(experiment.name=experiment.name,
file.prev.taxa=file.prev.taxa)
}
# All taxa variation
# ==============================================================================
for (p in c(10,25,50)){
experiment.name         <- paste0("all_taxa_missdetection_", p, "_",
format(Sys.time(), "%d_%m_%Y_%Hh%M"))
number.split            <- 3
split.criterion         <- "SiteId"
number.sample           <- 10000
models                  <- list("null", "glm", "gamloess", "rf", "ann")
env.factor              <- c("Temperature"                      = "temperature",       # Temp
"Flow velocity"                    = "velocity",          # FV
"Riparian agriculture"             = "A10m",              # A10m
"Livestock unit density"           = "cow.density",       # LUD
"Insecticide application rate"     = "IAR",               # IAR
"Urban area"                       = "urban.area",        # Urban
"Forest-river intersection"        = "FRI",               # FRI
"Forest-river intersection buffer" = "bFRI",              # bFRI
"Width variability"                = "width.variability") # WV
env.factor.full         <- c(env.factor,
"Temperature2"                     = "temperature2",
"Velocity2"                        = "velocity2")
noise1 <- list("type"       = "gaussian",
"target"     = "temperature",
"amount"     = 5,
"parameters" = list("min"=-5, "max"=35))
noise2 <- list("type"       = "missdetection",
"target"     = "Occurrence.Gammaridae",
"amount"     = p/100.0,
"parameters" = NULL)
noise3 <- list("type"       = "add_factor",
"target"     = "random1", # new factor name
"amount"     = NULL,
"parameters" = NULL)
noise4 <- list("type"       = "remove_factor",
"target"     = "temperature",
"amount"     = NULL,
"parameters" = NULL)
noise  <- list("noise2"     = noise2)
noise <- lapply(TAXA.COLNAMES, FUN=function(taxon){
noise_taxon <- list("type"       = "missdetection",
"target"     = taxon,
"amount"     = p/100.0,
"parameters" = NULL)
return(noise_taxon)
})
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# training model ----
training.pipeline(file.input.data=file.input.data,
file.prev.taxa=file.prev.taxa,
experiment.name=experiment.name,
number.split=number.split,
split.criterion=split.criterion,
number.sample=number.sample,
models=models,
noise=noise,
env.factor=env.factor,
env.factor.full=env.factor.full)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# plotting models and saving model ----
create.plots(experiment.name=experiment.name,
file.prev.taxa=file.prev.taxa)
}
# subset variation
# ==============================================================================
for (s in c(500,1000,2000)){
experiment.name         <- paste0("subset_", s, "_",
format(Sys.time(), "%d_%m_%Y_%Hh%M"))
number.split            <- 3
split.criterion         <- "SiteId"
number.sample           <- s
models                  <- list("null", "glm", "gamloess", "rf", "ann")
env.factor              <- c("Temperature"                      = "temperature",       # Temp
"Flow velocity"                    = "velocity",          # FV
"Riparian agriculture"             = "A10m",              # A10m
"Livestock unit density"           = "cow.density",       # LUD
"Insecticide application rate"     = "IAR",               # IAR
"Urban area"                       = "urban.area",        # Urban
"Forest-river intersection"        = "FRI",               # FRI
"Forest-river intersection buffer" = "bFRI",              # bFRI
"Width variability"                = "width.variability") # WV
env.factor.full         <- c(env.factor,
"Temperature2"                     = "temperature2",
"Velocity2"                        = "velocity2")
noise1 <- list("type"       = "gaussian",
"target"     = "temperature",
"amount"     = 5,
"parameters" = list("min"=-5, "max"=35))
noise2 <- list("type"       = "missdetection",
"target"     = "Occurrence.Gammaridae",
"amount"     = p/100.0,
"parameters" = NULL)
noise3 <- list("type"       = "add_factor",
"target"     = "random1", # new factor name
"amount"     = NULL,
"parameters" = NULL)
noise4 <- list("type"       = "remove_factor",
"target"     = "temperature",
"amount"     = NULL,
"parameters" = NULL)
noise  <- list("noise2"     = noise2)
noise <-list()
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# training model ----
training.pipeline(file.input.data=file.input.data,
file.prev.taxa=file.prev.taxa,
experiment.name=experiment.name,
number.split=number.split,
split.criterion=split.criterion,
number.sample=number.sample,
models=models,
noise=noise,
env.factor=env.factor,
env.factor.full=env.factor.full)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# plotting models and saving model ----
create.plots(experiment.name=experiment.name,
file.prev.taxa=file.prev.taxa)
}
# removing taxa variation
# ==============================================================================
for (index in c(1,2,3)){
l <- list(list("velocity"),
list("velocity",
"A10m",
"cow.density",
"IAR"),
list("velocity",
"A10m",
"cow.density",
"IAR",
"urban.area",
"FRI",
"bFRI",
"width.variability"))
to_remove <- l[[index]]
experiment.name         <- paste0("env_fact_removed_", length(to_remove), "_",
format(Sys.time(), "%d_%m_%Y_%Hh%M"))
number.split            <- 3
split.criterion         <- "SiteId"
number.sample           <- 10000
models                  <- list("null", "glm", "gamloess", "rf", "ann")
env.factor              <- c("Temperature"                      = "temperature",       # Temp
"Flow velocity"                    = "velocity",          # FV
"Riparian agriculture"             = "A10m",              # A10m
"Livestock unit density"           = "cow.density",       # LUD
"Insecticide application rate"     = "IAR",               # IAR
"Urban area"                       = "urban.area",        # Urban
"Forest-river intersection"        = "FRI",               # FRI
"Forest-river intersection buffer" = "bFRI",              # bFRI
"Width variability"                = "width.variability") # WV
env.factor.full         <- c(env.factor,
"Temperature2"                     = "temperature2",
"Velocity2"                        = "velocity2")
noise1 <- list("type"       = "gaussian",
"target"     = "temperature",
"amount"     = 5,
"parameters" = list("min"=-5, "max"=35))
noise2 <- list("type"       = "missdetection",
"target"     = "Occurrence.Gammaridae",
"amount"     = p/100.0,
"parameters" = NULL)
noise3 <- list("type"       = "add_factor",
"target"     = "random1", # new factor name
"amount"     = NULL,
"parameters" = NULL)
noise4 <- list("type"       = "remove_factor",
"target"     = "temperature",
"amount"     = NULL,
"parameters" = NULL)
noise  <- list("noise2"     = noise2)
noise <- lapply(to_remove, FUN=function(target){
noise.env.fact <- list("type"       = "remove_factor",
"target"     = target,
"amount"     = NULL,
"parameters" = NULL)
return(noise.env.fact)
})
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# training model ----
training.pipeline(file.input.data=file.input.data,
file.prev.taxa=file.prev.taxa,
experiment.name=experiment.name,
number.split=number.split,
split.criterion=split.criterion,
number.sample=number.sample,
models=models,
noise=noise,
env.factor=env.factor,
env.factor.full=env.factor.full)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# plotting models and saving model ----
create.plots(experiment.name=experiment.name,
file.prev.taxa=file.prev.taxa)
}
# adding random factor
# ==============================================================================
for (nb in c(1,3,9)){
experiment.name         <- paste0("add_env_fact_", nb, "_",
format(Sys.time(), "%d_%m_%Y_%Hh%M"))
number.split            <- 3
split.criterion         <- "SiteId"
number.sample           <- 10000
models                  <- list("null", "glm", "gamloess", "rf", "ann")
env.factor              <- c("Temperature"                      = "temperature",       # Temp
"Flow velocity"                    = "velocity",          # FV
"Riparian agriculture"             = "A10m",              # A10m
"Livestock unit density"           = "cow.density",       # LUD
"Insecticide application rate"     = "IAR",               # IAR
"Urban area"                       = "urban.area",        # Urban
"Forest-river intersection"        = "FRI",               # FRI
"Forest-river intersection buffer" = "bFRI",              # bFRI
"Width variability"                = "width.variability") # WV
env.factor.full         <- c(env.factor,
"Temperature2"                     = "temperature2",
"Velocity2"                        = "velocity2")
noise1 <- list("type"       = "gaussian",
"target"     = "temperature",
"amount"     = 5,
"parameters" = list("min"=-5, "max"=35))
noise2 <- list("type"       = "missdetection",
"target"     = "Occurrence.Gammaridae",
"amount"     = p/100.0,
"parameters" = NULL)
noise3 <- list("type"       = "add_factor",
"target"     = "random1", # new factor name
"amount"     = NULL,
"parameters" = NULL)
noise4 <- list("type"       = "remove_factor",
"target"     = "temperature",
"amount"     = NULL,
"parameters" = NULL)
noise  <- list("noise2"     = noise2)
noise <- lapply(as.list(seq(1, nb)), FUN=function(n){
noise.fact <- list("type"       = "add_factor",
"target"     = paste0("random",n), # new factor name
"amount"     = NULL,
"parameters" = NULL)
return(noise.fact)
})
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# training model ----
training.pipeline(file.input.data=file.input.data,
file.prev.taxa=file.prev.taxa,
experiment.name=experiment.name,
number.split=number.split,
split.criterion=split.criterion,
number.sample=number.sample,
models=models,
noise=noise,
env.factor=env.factor,
env.factor.full=env.factor.full)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# plotting models and saving model ----
create.plots(experiment.name=experiment.name,
file.prev.taxa=file.prev.taxa)
}
# noise on flow velocity
experiment.name         <- paste0("gaussian_velocity_3",
format(Sys.time(), "%d_%m_%Y_%Hh%M"))
number.split            <- 3
split.criterion         <- "SiteId"
number.sample           <- 10000
models                  <- list("null", "glm", "gamloess", "rf", "ann")
env.factor              <- c("Temperature"                      = "temperature",       # Temp
"Flow velocity"                    = "velocity",          # FV
"Riparian agriculture"             = "A10m",              # A10m
"Livestock unit density"           = "cow.density",       # LUD
"Insecticide application rate"     = "IAR",               # IAR
"Urban area"                       = "urban.area",        # Urban
"Forest-river intersection"        = "FRI",               # FRI
"Forest-river intersection buffer" = "bFRI",              # bFRI
"Width variability"                = "width.variability") # WV
env.factor.full         <- c(env.factor,
"Temperature2"                     = "temperature2",
"Velocity2"                        = "velocity2")
noise1 <- list("type"       = "gaussian",
"target"     = "velocity",
"amount"     = 3,
"parameters" = list("min"=-Inf, "max"=Inf))
noise  <- list("noise"     = noise1)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# training model ----
training.pipeline(file.input.data=file.input.data,
file.prev.taxa=file.prev.taxa,
experiment.name=experiment.name,
number.split=number.split,
split.criterion=split.criterion,
number.sample=number.sample,
models=models,
noise=noise,
env.factor=env.factor,
env.factor.full=env.factor.full)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# plotting models and saving model ----
create.plots(experiment.name=experiment.name,
file.prev.taxa=file.prev.taxa)
# noise on flow velocity
experiment.name         <- paste0("gaussian_temp_velocity_3",
format(Sys.time(), "%d_%m_%Y_%Hh%M"))
number.split            <- 3
split.criterion         <- "SiteId"
number.sample           <- 10000
models                  <- list("null", "glm", "gamloess", "rf", "ann")
env.factor              <- c("Temperature"                      = "temperature",       # Temp
"Flow velocity"                    = "velocity",          # FV
"Riparian agriculture"             = "A10m",              # A10m
"Livestock unit density"           = "cow.density",       # LUD
"Insecticide application rate"     = "IAR",               # IAR
"Urban area"                       = "urban.area",        # Urban
"Forest-river intersection"        = "FRI",               # FRI
"Forest-river intersection buffer" = "bFRI",              # bFRI
"Width variability"                = "width.variability") # WV
env.factor.full         <- c(env.factor,
"Temperature2"                     = "temperature2",
"Velocity2"                        = "velocity2")
noise1 <- list("type"       = "gaussian",
"target"     = "temperature",
"amount"     = 3,
"parameters" = list("min"=-5, "max"=35))
noise1 <- list("type"       = "gaussian",
"target"     = "velocity",
"amount"     = 3,
"parameters" = list("min"=-Inf, "max"=Inf))
noise  <- list("noise1"     = noise1,
"noise2"     = noise2)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# training model ----
training.pipeline(file.input.data=file.input.data,
file.prev.taxa=file.prev.taxa,
experiment.name=experiment.name,
number.split=number.split,
split.criterion=split.criterion,
number.sample=number.sample,
models=models,
noise=noise,
env.factor=env.factor,
env.factor.full=env.factor.full)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# plotting models and saving model ----
create.plots(experiment.name=experiment.name,
file.prev.taxa=file.prev.taxa)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Init ----
Sys.setenv(LANG="EN")
set.seed(13)   # Always set seed to a lucky number
getwd()        # Show working directory. It needs to be the location of 'main.r'
rm(list=ls())  # Free work space
graphics.off() # Clean graphics display
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Libraries ----
if (!require("dplyr")){install.packages("dplyr"); library("dplyr")}
if (!require("readr")){install.packages("readr"); library("readr")}
# to compute AUC
if (!require("pROC")){install.packages("pROC"); library("pROC")}
# For Neural Network
if (!require("reticulate")){install.packages("reticulate"); library("reticulate")}
#install_miniconda()              # run this the very first time reticulate is installed
#install.packages("tensorflow")
library("tensorflow")
#install_tensorflow()             # run this line only when opening new R session
#install.packages("keras")
library("keras")
# caret has to be loaded at the end to not cache function 'train'
if (!require("caret")){install.packages("caret"); library("caret")}
if (!require("jsonlite")){install.packages("jsonlite"); library("jsonlite")}
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Custom R scripts ----
source("ml_models.r")
source("plotting.r")
source("performances_assessment.r")
source("global_variables.r")
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Global variables ----
list.experiences    <- list("baseline"          = "baseline_21_07_2023_12h00",
"missdetection"     = "experiment_miss_gammaridae_50_01_07_2023_03h37",
"gaussian noise"    = "experiment_temp_5_30_06_2023_05h53",
"less datapoints"   = "experiment_subset_500_01_07_2023_11h23")
# temp DONE
list.exp.gauss      <- list("baseline"          = "baseline_21_07_2023_12h00",
"low noise"         = "gaussian_temp_1_21_07_2023_14h20",
"mid noise"         = "gaussian_temp_3_21_07_2023_16h42",
"high noise"        = "gaussian_temp_5_21_07_2023_22h09")
# missdetection gammaridae DONE
list.exp.miss.gamma <- list("baseline"          = "baseline_21_07_2023_12h00",
"low noise"         = "gammaridae_missdetection_10_22_07_2023_04h08",
"mid noise"         = "gammaridae_missdetection_25_22_07_2023_10h15",
"high noise"        = "gammaridae_missdetection_50_22_07_2023_16h37")
# missdetection gammaridae DONE
list.exp.miss.all   <- list("baseline"          = "baseline_21_07_2023_12h00",
"low noise"         = "all_taxa_missdetection_10_22_07_2023_23h01",
"mid noise"         = "all_taxa_missdetection_25_23_07_2023_05h43",
"high noise"        = "all_taxa_missdetection_50_23_07_2023_12h09")
# subset DONE
list.exp.subset     <- list("baseline"          = "baseline_21_07_2023_12h00",
"low noise"         = "subset_2000_24_07_2023_00h40",
"mid noise"         = "subset_1000_23_07_2023_21h24",
"high noise"        = "subset_500_23_07_2023_19h25")
# remove factor DONE
list.remove.fact    <- list("baseline"          = "baseline_21_07_2023_12h00",
"low noise"         = "env_fact_removed_1_24_07_2023_03h30",
"mid noise"         = "env_fact_removed_4_24_07_2023_06h16",
"high noise"        = "env_fact_removed_8_24_07_2023_08h30")
# gaussian temperature and velocity DONE
list.gauss.temp.vel <- list("baseline"          = "baseline_21_07_2023_12h00",
"low noise"         = "gaussian_velocity_3_24_07_2023_23h09",
"mid noise"         = "gaussian_temp_3_21_07_2023_16h42",
"high noise"        = "gaussian_temp_velocity_3_25_07_2023_06h38")
create.comparison.plots("gauss_temp", list.exp.gauss)
create.comparison.plots("miss_gammaridae", list.exp.miss.gamma)
create.comparison.plots("miss_all_taxa", list.exp.miss.all)
create.comparison.plots("subset", list.exp.subset)
create.comparison.plots("remove_fact", list.remove.fact)
create.comparison.plots("add_fact", list.add.fact)
create.comparison.plots("gauss_temp_vel", list.gauss.temp.vel)
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Init ----
Sys.setenv(LANG="EN")
set.seed(13)   # Always set seed to a lucky number
getwd()        # Show working directory. It needs to be the location of 'main.r'
rm(list=ls())  # Free work space
graphics.off() # Clean graphics display
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Libraries ----
if (!require("dplyr")){install.packages("dplyr"); library("dplyr")}
if (!require("readr")){install.packages("readr"); library("readr")}
# to compute AUC
if (!require("pROC")){install.packages("pROC"); library("pROC")}
# For Neural Network
if (!require("reticulate")){install.packages("reticulate"); library("reticulate")}
#install_miniconda()              # run this the very first time reticulate is installed
#install.packages("tensorflow")
library("tensorflow")
#install_tensorflow()             # run this line only when opening new R session
#install.packages("keras")
library("keras")
# caret has to be loaded at the end to not cache function 'train'
if (!require("caret")){install.packages("caret"); library("caret")}
if (!require("jsonlite")){install.packages("jsonlite"); library("jsonlite")}
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Custom R scripts ----
source("ml_models.r")
setwd("C:/Users/fragniga/Documents/synthetic_data_project/r_scripts")
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Init ----
Sys.setenv(LANG="EN")
set.seed(13)   # Always set seed to a lucky number
getwd()        # Show working directory. It needs to be the location of 'main.r'
rm(list=ls())  # Free work space
graphics.off() # Clean graphics display
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Libraries ----
if (!require("dplyr")){install.packages("dplyr"); library("dplyr")}
if (!require("readr")){install.packages("readr"); library("readr")}
# to compute AUC
if (!require("pROC")){install.packages("pROC"); library("pROC")}
# For Neural Network
if (!require("reticulate")){install.packages("reticulate"); library("reticulate")}
#install_miniconda()              # run this the very first time reticulate is installed
#install.packages("tensorflow")
library("tensorflow")
#install_tensorflow()             # run this line only when opening new R session
#install.packages("keras")
library("keras")
# caret has to be loaded at the end to not cache function 'train'
if (!require("caret")){install.packages("caret"); library("caret")}
if (!require("jsonlite")){install.packages("jsonlite"); library("jsonlite")}
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Custom R scripts ----
source("ml_models.r")
source("plotting.r")
source("performances_assessment.r")
source("global_variables.r")
# gauss_temp DONE
list.exp.gauss      <- list("baseline"          = "baseline_21_07_2023_12h00",
"low noise"         = "gaussian_temp_1_21_07_2023_14h20",
"mid noise"         = "gaussian_temp_3_21_07_2023_16h42",
"high noise"        = "gaussian_temp_5_21_07_2023_22h09")
create.comparison.plots("gauss_temp", list.exp.gauss)

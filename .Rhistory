list.experiences <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"missdetection"     = "experiment_miss_gamma_50_23_06_2023_23h09",
"gaussian noise"    = "experiment_temp_5_22_06_2023_22h39",
"less datapoints"   = "experiment_subsetsize500_24_06_2023_05h45")
list.exp.gauss   <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_temp_1_22_06_2023_10h36",
"mid noise"         = "experiment_temp_3_22_06_2023_16h08",
"high noise"        = "experiment_temp_5_22_06_2023_22h39")
list.exp.miss    <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_miss_gamma_10_23_06_2023_09h54",
"mid noise"         = "experiment_miss_gamma_25_23_06_2023_16h28",
"high noise"        = "experiment_miss_gamma_50_23_06_2023_23h09")
list.exp.subset  <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_subsetsize2000_24_06_2023_10h57",
"mid noise"         = "experiment_subsetsize1000_24_06_2023_07h45",
"high noise"        = "experiment_subsetsize500_24_06_2023_05h45")
dir.input       <- "../input_data/"
dir.output      <- "../output_data/"
prev.taxa       <- read.csv(paste0(dir.input, file.prev.taxa),
header = T,
sep = ",",
stringsAsFactors = F)
source("plotting.r")
source("performances_assessment.r")
multi.all.results <- lapply(list.experiences, FUN=function(name){
dir.experiment <- paste0(dir.output, name, "/")
models.cv      <- load.models(path=dir.experiment, split.type="CV")
all.results    <- summarize.all.results(models.cv, prev.taxa)
all.results["noise"] <- name
return(all.results)
})
setwd("C:/Users/fragniga/Documents/synthetic_data_project/r_scripts")
list.experiences <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"missdetection"     = "experiment_miss_gamma_50_23_06_2023_23h09",
"gaussian noise"    = "experiment_temp_5_22_06_2023_22h39",
"less datapoints"   = "experiment_subsetsize500_24_06_2023_05h45")
list.exp.gauss   <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_temp_1_22_06_2023_10h36",
"mid noise"         = "experiment_temp_3_22_06_2023_16h08",
"high noise"        = "experiment_temp_5_22_06_2023_22h39")
list.exp.miss    <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_miss_gamma_10_23_06_2023_09h54",
"mid noise"         = "experiment_miss_gamma_25_23_06_2023_16h28",
"high noise"        = "experiment_miss_gamma_50_23_06_2023_23h09")
list.exp.subset  <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_subsetsize2000_24_06_2023_10h57",
"mid noise"         = "experiment_subsetsize1000_24_06_2023_07h45",
"high noise"        = "experiment_subsetsize500_24_06_2023_05h45")
dir.input       <- "../input_data/"
dir.output      <- "../output_data/"
prev.taxa       <- read.csv(paste0(dir.input, file.prev.taxa),
header = T,
sep = ",",
stringsAsFactors = F)
source("plotting.r")
source("performances_assessment.r")
env.fact.under.obs <- "temperature"
taxon.under.obs <- "Occurrence.Gammaridae"
multi.all.results <- lapply(list.experiences, FUN=function(name){
dir.experiment <- paste0(dir.output, name, "/")
models.cv      <- load.models(path=dir.experiment, split.type="CV")
all.results    <- summarize.all.results(models.cv, prev.taxa)
all.results["noise"] <- name
return(all.results)
})
source("ml_models.r")
multi.all.results <- lapply(list.experiences, FUN=function(name){
dir.experiment <- paste0(dir.output, name, "/")
models.cv      <- load.models(path=dir.experiment, split.type="CV")
all.results    <- summarize.all.results(models.cv, prev.taxa)
all.results["noise"] <- name
return(all.results)
})
# Libraries ----
if (!require("dplyr")){install.packages("dplyr"); library("dplyr")}
# Libraries ----
if (!require("dplyr")){install.packages("dplyr"); library("dplyr")}
if (!require("readr")){install.packages("readr"); library("readr")}
# to compute AUC
if (!require("pROC")){install.packages("pROC"); library("pROC")}
# For Neural Network
if (!require("reticulate")){install.packages("reticulate"); library("reticulate")}
#install_miniconda()              # run this the very first time reticulate is installed
#install.packages("tensorflow")
library("tensorflow")
#install_tensorflow()             # run this line only when opening new R session
#install.packages("keras")
library("keras")
# caret has to be loaded at the end to not cache function 'train'
if (!require("caret")){install.packages("caret"); library("caret")}
if (!require("jsonlite")){install.packages("jsonlite"); library("jsonlite")}
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Custom R scripts ----
source("ml_models.r")
source("plotting.r")
source("performances_assessment.r")
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Global variables ----
list.experiences <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"missdetection"     = "experiment_miss_gamma_50_23_06_2023_23h09",
"gaussian noise"    = "experiment_temp_5_22_06_2023_22h39",
"less datapoints"   = "experiment_subsetsize500_24_06_2023_05h45")
list.exp.gauss   <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_temp_1_22_06_2023_10h36",
"mid noise"         = "experiment_temp_3_22_06_2023_16h08",
"high noise"        = "experiment_temp_5_22_06_2023_22h39")
list.exp.miss    <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_miss_gamma_10_23_06_2023_09h54",
"mid noise"         = "experiment_miss_gamma_25_23_06_2023_16h28",
"high noise"        = "experiment_miss_gamma_50_23_06_2023_23h09")
list.exp.subset  <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_subsetsize2000_24_06_2023_10h57",
"mid noise"         = "experiment_subsetsize1000_24_06_2023_07h45",
"high noise"        = "experiment_subsetsize500_24_06_2023_05h45")
dir.input       <- "../input_data/"
dir.output      <- "../output_data/"
prev.taxa       <- read.csv(paste0(dir.input, file.prev.taxa),
header = T,
sep = ",",
stringsAsFactors = F)
file.prev.taxa  <- "All_2729samples_9envfact_lme.area.elev_PrevalenceTaxa.csv"
prev.taxa       <- read.csv(paste0(dir.input, file.prev.taxa),
header = T,
sep = ",",
stringsAsFactors = F)
env.fact.under.obs <- "temperature"
multi.all.results <- lapply(list.experiences, FUN=function(name){
dir.experiment <- paste0(dir.output, name, "/")
models.cv      <- load.models(path=dir.experiment, split.type="CV")
all.results    <- summarize.all.results(models.cv, prev.taxa)
rm(models.cv)
all.results["noise"] <- name
return(all.results)
})
source("global_variables.r")
multi.all.results <- lapply(list.experiences, FUN=function(name){
dir.experiment <- paste0(dir.output, name, "/")
models.cv      <- load.models(path=dir.experiment, split.type="CV")
all.results    <- summarize.all.results(models.cv, prev.taxa)
rm(models.cv)
all.results["noise"] <- name
return(all.results)
})
View(final.multi.all.results)
final.multi.all.results <- bind_rows(multi.all.results, .id = "column_label")
View(final.multi.all.results)
multi.all.results <- lapply(list.experiences, FUN=function(name){
dir.experiment <- paste0(dir.output, name, "/")
models.cv      <- load.models(path=dir.experiment, split.type="CV")
all.results    <- summarize.all.results(models.cv, prev.taxa)
rm(models.cv)
all.results <- restructure.all.results(all.results)
all.results["noise"] <- name
return(all.results)
})
final.multi.all.results <- bind_rows(multi.all.results, .id = "column_label")
View(final.multi.all.results)
ggplot(data=final.multi.all.results,
aes(x=column_label, y=dev)) + # TODO: check value
geom_boxplot(aes(fill=fit_pred)) +
facet_wrap(~model) +
theme_minimal() +
theme(legend.title=element_blank())
list.exp.gauss   <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_temp_1_22_06_2023_10h36",
"mid noise"         = "experiment_temp_3_22_06_2023_16h08",
"high noise"        = "experiment_temp_5_22_06_2023_22h39")
# Libraries ----
if (!require("dplyr")){install.packages("dplyr"); library("dplyr")}
if (!require("readr")){install.packages("readr"); library("readr")}
# to compute AUC
if (!require("pROC")){install.packages("pROC"); library("pROC")}
# For Neural Network
if (!require("reticulate")){install.packages("reticulate"); library("reticulate")}
#install_miniconda()              # run this the very first time reticulate is installed
#install.packages("tensorflow")
library("tensorflow")
#install_tensorflow()             # run this line only when opening new R session
#install.packages("keras")
library("keras")
# caret has to be loaded at the end to not cache function 'train'
if (!require("caret")){install.packages("caret"); library("caret")}
if (!require("jsonlite")){install.packages("jsonlite"); library("jsonlite")}
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Custom R scripts ----
source("ml_models.r")
source("plotting.r")
source("performances_assessment.r")
source("global_variables.r")
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Global variables ----
list.experiences <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"missdetection"     = "experiment_miss_gamma_50_23_06_2023_23h09",
"gaussian noise"    = "experiment_temp_5_22_06_2023_22h39",
"less datapoints"   = "experiment_subsetsize500_24_06_2023_05h45")
list.exp.gauss   <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_temp_1_22_06_2023_10h36",
"mid noise"         = "experiment_temp_3_22_06_2023_16h08",
"high noise"        = "experiment_temp_5_22_06_2023_22h39")
list.exp.miss    <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_miss_gamma_10_23_06_2023_09h54",
"mid noise"         = "experiment_miss_gamma_25_23_06_2023_16h28",
"high noise"        = "experiment_miss_gamma_50_23_06_2023_23h09")
list.exp.miss    <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_miss_gamma_10_23_06_2023_09h54",
"mid noise"         = "experiment_miss_gamma_25_23_06_2023_16h28",
"high noise"        = "experiment_miss_gamma_50_23_06_2023_23h09")
list.exp.subset  <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_subsetsize2000_24_06_2023_10h57",
"mid noise"         = "experiment_subsetsize1000_24_06_2023_07h45",
"high noise"        = "experiment_subsetsize500_24_06_2023_05h45")
dir.input       <- "../input_data/"
dir.output      <- "../output_data/"
file.prev.taxa  <- "All_2729samples_9envfact_lme.area.elev_PrevalenceTaxa.csv"
prev.taxa       <- read.csv(paste0(dir.input, file.prev.taxa),
header = T,
sep = ",",
stringsAsFactors = F)
env.fact.under.obs <- "temperature"
taxon.under.obs <- "Occurrence.Gammaridae"
multi.all.results <- lapply(list.exp.gauss, FUN=function(name){
dir.experiment <- paste0(dir.output, name, "/")
models.cv      <- load.models(path=dir.experiment, split.type="CV")
all.results    <- summarize.all.results(models.cv, prev.taxa)
rm(models.cv)
all.results <- restructure.all.results(all.results)
all.results["noise"] <- name
return(all.results)
})
final.multi.all.results <- bind_rows(multi.all.results, .id = "column_label")
ggplot(data=final.multi.all.results,
aes(x=column_label, y=dev)) +
geom_boxplot(aes(fill=fit_pred)) +
facet_wrap(~model) +
theme_minimal() +
theme(legend.title=element_blank())
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Global variables ----
list.experiences <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"missdetection"     = "experiment_miss_gamma_50_23_06_2023_23h09",
"gaussian noise"    = "experiment_temp_5_22_06_2023_22h39",
"less datapoints"   = "experiment_subsetsize500_24_06_2023_05h45")
list.exp.gauss   <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_temp_1_22_06_2023_10h36",
"mid noise"         = "experiment_temp_3_22_06_2023_16h08",
"high noise"        = "experiment_temp_5_22_06_2023_22h39")
list.exp.miss    <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_miss_gamma_10_23_06_2023_09h54",
"mid noise"         = "experiment_miss_gamma_25_23_06_2023_16h28",
"high noise"        = "experiment_miss_gamma_50_23_06_2023_23h09")
list.exp.subset  <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_subsetsize2000_24_06_2023_10h57",
"mid noise"         = "experiment_subsetsize1000_24_06_2023_07h45",
"high noise"        = "experiment_subsetsize500_24_06_2023_05h45")
dir.input       <- "../input_data/"
dir.output      <- "../output_data/"
file.prev.taxa  <- "All_2729samples_9envfact_lme.area.elev_PrevalenceTaxa.csv"
prev.taxa       <- read.csv(paste0(dir.input, file.prev.taxa),
header = T,
sep = ",",
stringsAsFactors = F)
env.fact.under.obs <- "temperature"
taxon.under.obs <- "Occurrence.Gammaridae"
multi.ice <- lapply(list.experiences, FUN=function(name){
dir.experiment          <- paste0(dir.output, name, "/")
models.fit      <- load.models(path=dir.experiment, split.type="FIT")
std.const.fit   <- readRDS(file=paste0(dir.experiment, "standardization_constant_FIT.rds"))
ice.dfs <- plot.ice(models.performance=models.fit,
env.factor=env.fact.under.obs,
taxa=taxon.under.obs,
standardization.constant=std.const.fit[[1]],
nb.sample=100,
resolution=200)
observations              <- ice.dfs[["observations"]]
#env.factor.sampled        <- ice.dfs[["env.factor.sampled"]]
observations.mean         <- observations %>%
group_by(across(all_of(env.fact.under.obs)), model) %>%
summarise(avg = mean(pred))
observations.mean["noise"] <- name
return(observations.mean)
})
# Libraries ----
if (!require("dplyr")){install.packages("dplyr"); library("dplyr")}
if (!require("readr")){install.packages("readr"); library("readr")}
setwd("C:/Users/fragniga/Documents/synthetic_data_project/r_scripts")
# Libraries ----
if (!require("dplyr")){install.packages("dplyr"); library("dplyr")}
if (!require("readr")){install.packages("readr"); library("readr")}
# to compute AUC
if (!require("pROC")){install.packages("pROC"); library("pROC")}
# For Neural Network
if (!require("reticulate")){install.packages("reticulate"); library("reticulate")}
#install_miniconda()              # run this the very first time reticulate is installed
#install.packages("tensorflow")
library("tensorflow")
#install_tensorflow()             # run this line only when opening new R session
#install.packages("keras")
library("keras")
# caret has to be loaded at the end to not cache function 'train'
if (!require("caret")){install.packages("caret"); library("caret")}
if (!require("jsonlite")){install.packages("jsonlite"); library("jsonlite")}
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Custom R scripts ----
source("ml_models.r")
source("plotting.r")
source("performances_assessment.r")
source("global_variables.r")
# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Global variables ----
list.experiences <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"missdetection"     = "experiment_miss_gamma_50_23_06_2023_23h09",
"gaussian noise"    = "experiment_temp_5_22_06_2023_22h39",
"less datapoints"   = "experiment_subsetsize500_24_06_2023_05h45")
list.exp.gauss   <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_temp_1_22_06_2023_10h36",
"mid noise"         = "experiment_temp_3_22_06_2023_16h08",
"high noise"        = "experiment_temp_5_22_06_2023_22h39")
list.exp.miss    <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_miss_gamma_10_23_06_2023_09h54",
"mid noise"         = "experiment_miss_gamma_25_23_06_2023_16h28",
"high noise"        = "experiment_miss_gamma_50_23_06_2023_23h09")
list.exp.subset  <- list("baseline"          = "experiment_no_noise_21_06_2023_17h13",
"low noise"         = "experiment_subsetsize2000_24_06_2023_10h57",
"mid noise"         = "experiment_subsetsize1000_24_06_2023_07h45",
"high noise"        = "experiment_subsetsize500_24_06_2023_05h45")
dir.input       <- "../input_data/"
dir.output      <- "../output_data/"
file.prev.taxa  <- "All_2729samples_9envfact_lme.area.elev_PrevalenceTaxa.csv"
prev.taxa       <- read.csv(paste0(dir.input, file.prev.taxa),
header = T,
sep = ",",
stringsAsFactors = F)
env.fact.under.obs <- "temperature"
taxon.under.obs <- "Occurrence.Gammaridae"
multi.ice <- lapply(list.experiences, FUN=function(name){
dir.experiment          <- paste0(dir.output, name, "/")
models.fit      <- load.models(path=dir.experiment, split.type="FIT")
std.const.fit   <- readRDS(file=paste0(dir.experiment, "standardization_constant_FIT.rds"))
ice.dfs <- plot.ice(models.performance=models.fit,
env.factor=env.fact.under.obs,
taxa=taxon.under.obs,
standardization.constant=std.const.fit[[1]],
nb.sample=100,
resolution=200)
observations              <- ice.dfs[["observations"]]
#env.factor.sampled        <- ice.dfs[["env.factor.sampled"]]
observations.mean         <- observations %>%
group_by(across(all_of(env.fact.under.obs)), model) %>%
summarise(avg = mean(pred))
observations.mean["noise"] <- name
return(observations.mean)
})
multi.ice <- lapply(list.exp.gauss, FUN=function(name){
dir.experiment          <- paste0(dir.output, name, "/")
models.fit      <- load.models(path=dir.experiment, split.type="FIT")
std.const.fit   <- readRDS(file=paste0(dir.experiment, "standardization_constant_FIT.rds"))
ice.dfs <- plot.ice(models.performance=models.fit,
env.factor=env.fact.under.obs,
taxa=taxon.under.obs,
standardization.constant=std.const.fit[[1]],
nb.sample=100,
resolution=200)
observations              <- ice.dfs[["observations"]]
#env.factor.sampled        <- ice.dfs[["env.factor.sampled"]]
observations.mean         <- observations %>%
group_by(across(all_of(env.fact.under.obs)), model) %>%
summarise(avg = mean(pred))
observations.mean["noise"] <- name
return(observations.mean)
})
multi.ice <- lapply(list.exp.miss, FUN=function(name){
dir.experiment          <- paste0(dir.output, name, "/")
models.fit      <- load.models(path=dir.experiment, split.type="FIT")
std.const.fit   <- readRDS(file=paste0(dir.experiment, "standardization_constant_FIT.rds"))
ice.dfs <- plot.ice(models.performance=models.fit,
env.factor=env.fact.under.obs,
taxa=taxon.under.obs,
standardization.constant=std.const.fit[[1]],
nb.sample=100,
resolution=200)
observations              <- ice.dfs[["observations"]]
#env.factor.sampled        <- ice.dfs[["env.factor.sampled"]]
observations.mean         <- observations %>%
group_by(across(all_of(env.fact.under.obs)), model) %>%
summarise(avg = mean(pred))
observations.mean["noise"] <- name
return(observations.mean)
})
multi.ice <- lapply(list.exp.subset, FUN=function(name){
dir.experiment          <- paste0(dir.output, name, "/")
models.fit      <- load.models(path=dir.experiment, split.type="FIT")
std.const.fit   <- readRDS(file=paste0(dir.experiment, "standardization_constant_FIT.rds"))
ice.dfs <- plot.ice(models.performance=models.fit,
env.factor=env.fact.under.obs,
taxa=taxon.under.obs,
standardization.constant=std.const.fit[[1]],
nb.sample=100,
resolution=200)
observations              <- ice.dfs[["observations"]]
#env.factor.sampled        <- ice.dfs[["env.factor.sampled"]]
observations.mean         <- observations %>%
group_by(across(all_of(env.fact.under.obs)), model) %>%
summarise(avg = mean(pred))
observations.mean["noise"] <- name
return(observations.mean)
})
# somehow this function takes ~10 min to run
multi.all.results <- lapply(list.exp.gauss, FUN=function(name){
dir.experiment <- paste0(dir.output, name, "/")
models.cv      <- load.models(path=dir.experiment, split.type="CV")
all.results    <- summarize.all.results(models.cv, prev.taxa)
rm(models.cv)
all.results <- restructure.all.results(all.results)
all.results["noise"] <- name
return(all.results)
})
final.multi.all.results <- bind_rows(multi.all.results, .id = "column_label")
ggplot(data=final.multi.all.results,
aes(x=column_label, y=dev)) +
geom_boxplot(aes(fill=fit_prled)) +
facet_wrap(~model) +
theme_minimal() +
theme(legend.title=element_blank())
